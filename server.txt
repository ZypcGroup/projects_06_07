# include <stdio.h>
# include <stdlib.h>
# include <sys/types.h>
# include <sys/socket.h>
# include <unistd.h>
# include <string.h>
# include <netinet/in.h>
# include <netdb.h>
# include <arpa/inet.h>
# include <fcntl.h>
# include <sys/stat.h>
# include <dirent.h>
# define PORTNUM 1500
# define HOSTLEN 256

int split(char *h, char *p, char *hp, const char *del)
{
        char *s = NULL;

        s = strtok(hp,del);
        if(s!=NULL)
        {
                strcpy(h,s);
                s = strtok(NULL,del);
        }
        else return 0;
        if(s!=NULL)
        {
                strcpy(p,s);
                return 1;
        }
        else return 0;
}

int isadir(char *str)
{
	struct stat info;
	return (stat(str,&info)!=-1&&S_ISDIR(info.st_mode));
}


void *emalloc(size_t n)
{
	void *rv = malloc(n);
	if(rv == NULL)
	{
		printf("malloc error!\n");
		exit(0);
	}
	return rv;
}
void do_copy(char *src, int sock_fd2)
{
	int in_fd,n_chars;
	char buf[BUFSIZ];
	if((in_fd = open(src,O_RDONLY))==-1)
	{
		printf("open error!\n");
		exit(0);
	}
	while((n_chars = read(in_fd,buf,BUFSIZ))>0)
	{
		if(write(sock_fd2,buf,n_chars)!=n_chars)
		{
			printf("write error!\n");
			exit(0);
		}
	}
	close(in_fd);
}

void copydir(char *srcdir,int sock_fd1)
{
	char *srcpath;
	DIR *dir_ptr;
	struct dirent* direntp;
	srcpath = (char *)emalloc(strlen(srcdir)+1+MAXNAMLEN+1);
	if((dir_ptr = opendir(srcdir)) == NULL)
	{
		printf("Cannot open directory");
		exit(0);
	}
	write(sock_fd1,srcdir,strlen(srcdir));
	write(sock_fd1,"dir",3);
	while((direntp = readdir(dir_ptr))!=NULL)
	{
		sprintf(srcpath,"%s/%s",srcdir,direntp->d_name);
		if(isadir(srcpath))
		{
			if(strcmp(direntp->d_name,".")!=0 && strcmp(direntp->d_name,"..")!=0)
			{
				write(sock_fd1,srcpath,strlen(srcpath));
				write(sock_fd1,"dir",3);
				continue;
			}
		}
		write(sock_fd1,srcpath,strlen(srcpath));
		write(sock_fd1,"reg",3);
		printf("%s\n",srcpath);
/********/		do_copy(srcpath,sock_fd1);
	}
	write(sock_fd1,"end",3);
	close(sock_fd1);
	closedir(dir_ptr);
	free(srcpath);
}
int main(int argc,char *argv[])
{
	int sock_id, sock_fd;
	struct sockaddr_in saddr;
	struct hostent *hp;
	char hostname[HOSTLEN];
	char dirname[BUFSIZ];
	char host_path[99],host[99],path[99];
	
//	get a socket
	
	sock_id = socket(PF_INET, SOCK_STREAM, 0);
	if(sock_id == -1)
	{
		printf("socket error!\n");
		exit(0);
	}
//	bind address to socket
	
	bzero(&saddr, sizeof(saddr));
	gethostname(hostname,HOSTLEN);
	hp = gethostbyname(hostname);
//	bcopy(hp->h_addr_list,(struct in_addr*)&saddr.sin_addr, hp->h_length);
	saddr.sin_port = htons(PORTNUM);
	saddr.sin_family = AF_INET;	
//	saddr.sin_addr.s_addr = inet_addr(hp->h_addr_list);
	saddr.sin_addr.s_addr = htonl(INADDR_ANY);

	if(bind(sock_id,(struct sockaddr*)&saddr,sizeof(struct sockaddr))== -1)
	{
		printf("bind error!\n");
		exit(0);
	}


	if(listen(sock_id, 1)!=0)
	{
		printf("listen error!\n");
		exit(0);
	}
//	printf("listen success!\n");
//	char host_path[99],host[99],path[99];
//	split(host,path,host_path,":");

	while(1)
	{
		sock_fd = accept(sock_id, NULL, NULL);
		if(sock_fd == -1)
		{
			printf("accept error!\n");
			exit(0);
		}
		else
			printf("accept succeed!\n");
//		split(host,path,host_path,":");

		if(read(sock_fd,dirname,BUFSIZ)== -1)
		{
			printf("read error!\n");
			exit(0);
		}
		strcpy(host_path,dirname);
		split(host,path,host_path,":");
		strcpy(dirname,path);
		printf("dirname%s\n",dirname);
		
		if(isadir(dirname))
		{
			copydir(dirname,sock_fd);
		}
		else
		{
			write(sock_fd,dirname,strlen(dirname));
			write(sock_fd,"reg",3);
			printf("%s\n",dirname);
			do_copy(dirname,sock_fd);
			write(sock_fd,"end",3);
			close(sock_fd);
		}
/*
		if((in_fd = open(dirname,O_RDONLY)) == -1)
		{
			printf("open error!\n");
			exit(0);
		}
		while((n_chars = read(in_fd,buf,BUFSIZ))>0)
		{
			if(write(sock_fd,buf,n_chars)!=n_chars)
			{
				printf("write error!\n");
				exit(0);
			}
		}
		close(in_fd);
		close(sock_fd);
*/
	}	
	return 0;
}


